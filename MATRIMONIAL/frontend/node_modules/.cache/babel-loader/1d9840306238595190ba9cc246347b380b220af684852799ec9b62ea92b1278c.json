{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiyas\\\\OneDrive\\\\Desktop\\\\MATRIMONIAL\\\\MATRIMONIAL\\\\frontend\\\\src\\\\components\\\\Payment.js\",\n  _s = $RefreshSig$();\n// // src/Payment.js\n// import React, { useState } from \"react\";\n\n// const Payment = () => {\n//     const [amount, setAmount] = useState(\"\");\n\n//     const handlePayment = async () => {\n//         const response = await fetch(\"http://localhost:5000/api/payment/create-order\", {\n//             method: \"POST\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//             },\n//             body: JSON.stringify({ amount: amount * 100 }), // Convert to smallest currency unit (paisa)\n//         });\n\n//         const orderData = await response.json();\n\n//         const options = {\n//             key: process.env.REACT_APP_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Razorpay Dashboard\n//             amount: orderData.amount,\n//             currency: orderData.currency,\n//             name: \"Your Company Name\",\n//             description: \"Test Transaction\",\n//             order_id: orderData.id,\n//             handler: function (response) {\n//                 alert(`Payment successful: ${response.razorpay_payment_id}`);\n//                 console.log(response);\n//             },\n//             prefill: {\n//                 name: \"Bhavna Bairagi\",\n//                 email: \"bhavnabairagi12@gmail.com\",\n//                 contact: \"8839022132\",\n//             },\n//             theme: {\n//                 color: \"#3399cc\",\n//             },\n//         };\n\n//         const razorpay = new window.Razorpay(options);\n//         razorpay.open();\n//     };\n\n//     return (\n//         <div>\n//             <h2>Payment</h2>\n//             <input\n//                 type=\"number\"\n//                 placeholder=\"Enter Amount\"\n//                 value={amount}\n//                 onChange={(e) => setAmount(e.target.value)}\n//             />\n//             <button onClick={handlePayment}>Pay</button>\n//         </div>\n//     );\n// };\n\n// export default Payment;\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Payment = () => {\n  _s();\n  const [amount, setAmount] = useState(\"\");\n  const navigate = useNavigate();\n  const handlePayment = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/payment/create-order\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          amount: amount * 100\n        }) // Convert to smallest currency unit (paisa)\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create payment order\");\n      }\n      const orderData = await response.json();\n      const options = {\n        key: process.env.REACT_APP_RAZORPAY_KEY_ID,\n        // Enter the Key ID generated from the Razorpay Dashboard\n        amount: orderData.amount,\n        currency: orderData.currency,\n        name: \"Your Company Name\",\n        description: \"Test Transaction\",\n        order_id: orderData.id,\n        handler: function (response) {\n          alert(`Payment successful: ${response.razorpay_payment_id}`);\n          console.log(response);\n\n          // Navigate to profile page after successful payment\n          navigate(\"/profile\");\n        },\n        prefill: {\n          name: \"Bhavna Bairagi\",\n          email: \"bhavnabairagi12@gmail.com\",\n          contact: \"8839022132\"\n        },\n        theme: {\n          color: \"#3399cc\"\n        },\n        // This ensures the handler function is called even if the modal is closed\n        modal: {\n          ondismiss: function () {\n            console.log(\"Payment modal closed without completion\");\n          }\n        }\n      };\n      const razorpay = new window.Razorpay(options);\n      razorpay.open();\n    } catch (error) {\n      console.error(\"Payment error:\", error);\n      alert(\"Something went wrong with the payment. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container p-6 max-w-md mx-auto bg-white rounded-lg shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-6 text-center\",\n      children: \"Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"amount\",\n        className: \"block text-gray-700 mb-2\",\n        children: \"Amount (\\u20B9)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"amount\",\n        type: \"number\",\n        placeholder: \"Enter Amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n        min: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePayment,\n      disabled: !amount,\n      className: \"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed\",\n      children: \"Pay Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n_s(Payment, \"tRjlEFTGBaHi1h7KuYSYWOICHI0=\", false, function () {\n  return [useNavigate];\n});\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Payment","_s","amount","setAmount","navigate","handlePayment","response","fetch","method","headers","body","JSON","stringify","ok","Error","orderData","json","options","key","process","env","REACT_APP_RAZORPAY_KEY_ID","currency","name","description","order_id","id","handler","alert","razorpay_payment_id","console","log","prefill","email","contact","theme","color","modal","ondismiss","razorpay","window","Razorpay","open","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","value","onChange","e","target","min","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/tiyas/OneDrive/Desktop/MATRIMONIAL/MATRIMONIAL/frontend/src/components/Payment.js"],"sourcesContent":["// // src/Payment.js\r\n// import React, { useState } from \"react\";\r\n\r\n// const Payment = () => {\r\n//     const [amount, setAmount] = useState(\"\");\r\n\r\n//     const handlePayment = async () => {\r\n//         const response = await fetch(\"http://localhost:5000/api/payment/create-order\", {\r\n//             method: \"POST\",\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//             },\r\n//             body: JSON.stringify({ amount: amount * 100 }), // Convert to smallest currency unit (paisa)\r\n//         });\r\n\r\n//         const orderData = await response.json();\r\n\r\n//         const options = {\r\n//             key: process.env.REACT_APP_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Razorpay Dashboard\r\n//             amount: orderData.amount,\r\n//             currency: orderData.currency,\r\n//             name: \"Your Company Name\",\r\n//             description: \"Test Transaction\",\r\n//             order_id: orderData.id,\r\n//             handler: function (response) {\r\n//                 alert(`Payment successful: ${response.razorpay_payment_id}`);\r\n//                 console.log(response);\r\n//             },\r\n//             prefill: {\r\n//                 name: \"Bhavna Bairagi\",\r\n//                 email: \"bhavnabairagi12@gmail.com\",\r\n//                 contact: \"8839022132\",\r\n//             },\r\n//             theme: {\r\n//                 color: \"#3399cc\",\r\n//             },\r\n//         };\r\n\r\n//         const razorpay = new window.Razorpay(options);\r\n//         razorpay.open();\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Payment</h2>\r\n//             <input\r\n//                 type=\"number\"\r\n//                 placeholder=\"Enter Amount\"\r\n//                 value={amount}\r\n//                 onChange={(e) => setAmount(e.target.value)}\r\n//             />\r\n//             <button onClick={handlePayment}>Pay</button>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Payment;\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Payment = () => {\r\n    const [amount, setAmount] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const handlePayment = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/payment/create-order\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ amount: amount * 100 }), // Convert to smallest currency unit (paisa)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to create payment order\");\r\n            }\r\n\r\n            const orderData = await response.json();\r\n\r\n            const options = {\r\n                key: process.env.REACT_APP_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Razorpay Dashboard\r\n                amount: orderData.amount,\r\n                currency: orderData.currency,\r\n                name: \"Your Company Name\",\r\n                description: \"Test Transaction\",\r\n                order_id: orderData.id,\r\n                handler: function (response) {\r\n                    alert(`Payment successful: ${response.razorpay_payment_id}`);\r\n                    console.log(response);\r\n                    \r\n                    // Navigate to profile page after successful payment\r\n                    navigate(\"/profile\");\r\n                },\r\n                prefill: {\r\n                    name: \"Bhavna Bairagi\",\r\n                    email: \"bhavnabairagi12@gmail.com\",\r\n                    contact: \"8839022132\",\r\n                },\r\n                theme: {\r\n                    color: \"#3399cc\",\r\n                },\r\n                // This ensures the handler function is called even if the modal is closed\r\n                modal: {\r\n                    ondismiss: function() {\r\n                        console.log(\"Payment modal closed without completion\");\r\n                    }\r\n                }\r\n            };\r\n\r\n            const razorpay = new window.Razorpay(options);\r\n            razorpay.open();\r\n        } catch (error) {\r\n            console.error(\"Payment error:\", error);\r\n            alert(\"Something went wrong with the payment. Please try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"payment-container p-6 max-w-md mx-auto bg-white rounded-lg shadow-md\">\r\n            <h2 className=\"text-2xl font-bold mb-6 text-center\">Payment</h2>\r\n            <div className=\"mb-4\">\r\n                <label htmlFor=\"amount\" className=\"block text-gray-700 mb-2\">Amount (₹)</label>\r\n                <input\r\n                    id=\"amount\"\r\n                    type=\"number\"\r\n                    placeholder=\"Enter Amount\"\r\n                    value={amount}\r\n                    onChange={(e) => setAmount(e.target.value)}\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    min=\"1\"\r\n                />\r\n            </div>\r\n            <button \r\n                onClick={handlePayment}\r\n                disabled={!amount}\r\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n                Pay Now\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Payment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}